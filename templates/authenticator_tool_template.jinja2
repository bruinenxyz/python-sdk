import json
from langchain.callbacks.manager import AsyncCallbackManagerForToolRun, CallbackManagerForToolRun
from langchain.tools import BaseTool
from pydantic import BaseModel, Field
from typing import Optional

from ..bruinen_api_client import AuthenticatedClient
from ..bruinen_api_client.api.auth import get_user_auth_token
from ..bruinen_api_client.models import Auth
from ..bruinen_api_client.types import Response

class {{ class_name }}(BaseTool):
    name = '{{ tool_name }}'
    description = '''Userful for when a user\'s {{ source_name.title() }} account is not authenticated.
    Input to the tool should be an empty string.
    The response from the tool will be a URL that you return to the user for them to complete auth.
    '''
    # Could add: This URL will be your final answer.

    client: AuthenticatedClient
    server: str
    user_id: str

    def _run(
        self,
        query: str,
        run_manager: Optional[CallbackManagerForToolRun] = None
    ) -> str:

        response: Response[Auth] = get_user_auth_token(client=self.client, user_id=self.user_id)
        auth_token = json.loads(response.content)

        # TODO chat with Tevon about how this URL should be formatted
        return self.server + '?userToken=' + auth_token + '&source=github'

    # TODO implement this later
    async def _arun(
        self,
        user_id: str,
        run_manager: Optional[AsyncCallbackManagerForToolRun] = None,
    ) -> str:
        """Run the tool asynchronously."""
        return await self.requests_wrapper.aget((query))